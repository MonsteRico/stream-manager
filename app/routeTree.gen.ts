/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NewImport } from './routes/new'
import { Route as IndexImport } from './routes/index'
import { Route as SessionSessionIdImport } from './routes/session.$sessionId'
import { Route as OverlaysOverlayLayoutImport } from './routes/overlays/_overlayLayout'
import { Route as OverlaysSessionIdWaitingForNextImport } from './routes/overlays/$sessionId/waitingForNext'
import { Route as OverlaysSessionIdThanksImport } from './routes/overlays/$sessionId/thanks'
import { Route as OverlaysSessionIdStartingSoonImport } from './routes/overlays/$sessionId/startingSoon'
import { Route as OverlaysSessionIdMatchImport } from './routes/overlays/$sessionId/match'
import { Route as OverlaysSessionIdMapsImport } from './routes/overlays/$sessionId/maps'
import { Route as OverlaysSessionIdBrbImport } from './routes/overlays/$sessionId/brb'
import { Route as OverlaysSessionIdVictoryWinnerImport } from './routes/overlays/$sessionId/victory.$winner'

// Create Virtual Routes

const OverlaysImport = createFileRoute('/overlays')()

// Create/Update Routes

const OverlaysRoute = OverlaysImport.update({
  path: '/overlays',
  getParentRoute: () => rootRoute,
} as any)

const NewRoute = NewImport.update({
  path: '/new',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SessionSessionIdRoute = SessionSessionIdImport.update({
  path: '/session/$sessionId',
  getParentRoute: () => rootRoute,
} as any)

const OverlaysOverlayLayoutRoute = OverlaysOverlayLayoutImport.update({
  id: '/_overlayLayout',
  getParentRoute: () => OverlaysRoute,
} as any)

const OverlaysSessionIdWaitingForNextRoute =
  OverlaysSessionIdWaitingForNextImport.update({
    path: '/$sessionId/waitingForNext',
    getParentRoute: () => OverlaysRoute,
  } as any)

const OverlaysSessionIdThanksRoute = OverlaysSessionIdThanksImport.update({
  path: '/$sessionId/thanks',
  getParentRoute: () => OverlaysRoute,
} as any)

const OverlaysSessionIdStartingSoonRoute =
  OverlaysSessionIdStartingSoonImport.update({
    path: '/$sessionId/startingSoon',
    getParentRoute: () => OverlaysRoute,
  } as any)

const OverlaysSessionIdMatchRoute = OverlaysSessionIdMatchImport.update({
  path: '/$sessionId/match',
  getParentRoute: () => OverlaysRoute,
} as any)

const OverlaysSessionIdMapsRoute = OverlaysSessionIdMapsImport.update({
  path: '/$sessionId/maps',
  getParentRoute: () => OverlaysRoute,
} as any)

const OverlaysSessionIdBrbRoute = OverlaysSessionIdBrbImport.update({
  path: '/$sessionId/brb',
  getParentRoute: () => OverlaysRoute,
} as any)

const OverlaysSessionIdVictoryWinnerRoute =
  OverlaysSessionIdVictoryWinnerImport.update({
    path: '/$sessionId/victory/$winner',
    getParentRoute: () => OverlaysRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/new': {
      id: '/new'
      path: '/new'
      fullPath: '/new'
      preLoaderRoute: typeof NewImport
      parentRoute: typeof rootRoute
    }
    '/overlays': {
      id: '/overlays'
      path: '/overlays'
      fullPath: '/overlays'
      preLoaderRoute: typeof OverlaysImport
      parentRoute: typeof rootRoute
    }
    '/overlays/_overlayLayout': {
      id: '/overlays/_overlayLayout'
      path: '/overlays'
      fullPath: '/overlays'
      preLoaderRoute: typeof OverlaysOverlayLayoutImport
      parentRoute: typeof OverlaysRoute
    }
    '/session/$sessionId': {
      id: '/session/$sessionId'
      path: '/session/$sessionId'
      fullPath: '/session/$sessionId'
      preLoaderRoute: typeof SessionSessionIdImport
      parentRoute: typeof rootRoute
    }
    '/overlays/$sessionId/brb': {
      id: '/overlays/$sessionId/brb'
      path: '/$sessionId/brb'
      fullPath: '/overlays/$sessionId/brb'
      preLoaderRoute: typeof OverlaysSessionIdBrbImport
      parentRoute: typeof OverlaysImport
    }
    '/overlays/$sessionId/maps': {
      id: '/overlays/$sessionId/maps'
      path: '/$sessionId/maps'
      fullPath: '/overlays/$sessionId/maps'
      preLoaderRoute: typeof OverlaysSessionIdMapsImport
      parentRoute: typeof OverlaysImport
    }
    '/overlays/$sessionId/match': {
      id: '/overlays/$sessionId/match'
      path: '/$sessionId/match'
      fullPath: '/overlays/$sessionId/match'
      preLoaderRoute: typeof OverlaysSessionIdMatchImport
      parentRoute: typeof OverlaysImport
    }
    '/overlays/$sessionId/startingSoon': {
      id: '/overlays/$sessionId/startingSoon'
      path: '/$sessionId/startingSoon'
      fullPath: '/overlays/$sessionId/startingSoon'
      preLoaderRoute: typeof OverlaysSessionIdStartingSoonImport
      parentRoute: typeof OverlaysImport
    }
    '/overlays/$sessionId/thanks': {
      id: '/overlays/$sessionId/thanks'
      path: '/$sessionId/thanks'
      fullPath: '/overlays/$sessionId/thanks'
      preLoaderRoute: typeof OverlaysSessionIdThanksImport
      parentRoute: typeof OverlaysImport
    }
    '/overlays/$sessionId/waitingForNext': {
      id: '/overlays/$sessionId/waitingForNext'
      path: '/$sessionId/waitingForNext'
      fullPath: '/overlays/$sessionId/waitingForNext'
      preLoaderRoute: typeof OverlaysSessionIdWaitingForNextImport
      parentRoute: typeof OverlaysImport
    }
    '/overlays/$sessionId/victory/$winner': {
      id: '/overlays/$sessionId/victory/$winner'
      path: '/$sessionId/victory/$winner'
      fullPath: '/overlays/$sessionId/victory/$winner'
      preLoaderRoute: typeof OverlaysSessionIdVictoryWinnerImport
      parentRoute: typeof OverlaysImport
    }
  }
}

// Create and export the route tree

interface OverlaysRouteChildren {
  OverlaysOverlayLayoutRoute: typeof OverlaysOverlayLayoutRoute
  OverlaysSessionIdBrbRoute: typeof OverlaysSessionIdBrbRoute
  OverlaysSessionIdMapsRoute: typeof OverlaysSessionIdMapsRoute
  OverlaysSessionIdMatchRoute: typeof OverlaysSessionIdMatchRoute
  OverlaysSessionIdStartingSoonRoute: typeof OverlaysSessionIdStartingSoonRoute
  OverlaysSessionIdThanksRoute: typeof OverlaysSessionIdThanksRoute
  OverlaysSessionIdWaitingForNextRoute: typeof OverlaysSessionIdWaitingForNextRoute
  OverlaysSessionIdVictoryWinnerRoute: typeof OverlaysSessionIdVictoryWinnerRoute
}

const OverlaysRouteChildren: OverlaysRouteChildren = {
  OverlaysOverlayLayoutRoute: OverlaysOverlayLayoutRoute,
  OverlaysSessionIdBrbRoute: OverlaysSessionIdBrbRoute,
  OverlaysSessionIdMapsRoute: OverlaysSessionIdMapsRoute,
  OverlaysSessionIdMatchRoute: OverlaysSessionIdMatchRoute,
  OverlaysSessionIdStartingSoonRoute: OverlaysSessionIdStartingSoonRoute,
  OverlaysSessionIdThanksRoute: OverlaysSessionIdThanksRoute,
  OverlaysSessionIdWaitingForNextRoute: OverlaysSessionIdWaitingForNextRoute,
  OverlaysSessionIdVictoryWinnerRoute: OverlaysSessionIdVictoryWinnerRoute,
}

const OverlaysRouteWithChildren = OverlaysRoute._addFileChildren(
  OverlaysRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/new': typeof NewRoute
  '/overlays': typeof OverlaysOverlayLayoutRoute
  '/session/$sessionId': typeof SessionSessionIdRoute
  '/overlays/$sessionId/brb': typeof OverlaysSessionIdBrbRoute
  '/overlays/$sessionId/maps': typeof OverlaysSessionIdMapsRoute
  '/overlays/$sessionId/match': typeof OverlaysSessionIdMatchRoute
  '/overlays/$sessionId/startingSoon': typeof OverlaysSessionIdStartingSoonRoute
  '/overlays/$sessionId/thanks': typeof OverlaysSessionIdThanksRoute
  '/overlays/$sessionId/waitingForNext': typeof OverlaysSessionIdWaitingForNextRoute
  '/overlays/$sessionId/victory/$winner': typeof OverlaysSessionIdVictoryWinnerRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/new': typeof NewRoute
  '/overlays': typeof OverlaysOverlayLayoutRoute
  '/session/$sessionId': typeof SessionSessionIdRoute
  '/overlays/$sessionId/brb': typeof OverlaysSessionIdBrbRoute
  '/overlays/$sessionId/maps': typeof OverlaysSessionIdMapsRoute
  '/overlays/$sessionId/match': typeof OverlaysSessionIdMatchRoute
  '/overlays/$sessionId/startingSoon': typeof OverlaysSessionIdStartingSoonRoute
  '/overlays/$sessionId/thanks': typeof OverlaysSessionIdThanksRoute
  '/overlays/$sessionId/waitingForNext': typeof OverlaysSessionIdWaitingForNextRoute
  '/overlays/$sessionId/victory/$winner': typeof OverlaysSessionIdVictoryWinnerRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/new': typeof NewRoute
  '/overlays': typeof OverlaysRouteWithChildren
  '/overlays/_overlayLayout': typeof OverlaysOverlayLayoutRoute
  '/session/$sessionId': typeof SessionSessionIdRoute
  '/overlays/$sessionId/brb': typeof OverlaysSessionIdBrbRoute
  '/overlays/$sessionId/maps': typeof OverlaysSessionIdMapsRoute
  '/overlays/$sessionId/match': typeof OverlaysSessionIdMatchRoute
  '/overlays/$sessionId/startingSoon': typeof OverlaysSessionIdStartingSoonRoute
  '/overlays/$sessionId/thanks': typeof OverlaysSessionIdThanksRoute
  '/overlays/$sessionId/waitingForNext': typeof OverlaysSessionIdWaitingForNextRoute
  '/overlays/$sessionId/victory/$winner': typeof OverlaysSessionIdVictoryWinnerRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/new'
    | '/overlays'
    | '/session/$sessionId'
    | '/overlays/$sessionId/brb'
    | '/overlays/$sessionId/maps'
    | '/overlays/$sessionId/match'
    | '/overlays/$sessionId/startingSoon'
    | '/overlays/$sessionId/thanks'
    | '/overlays/$sessionId/waitingForNext'
    | '/overlays/$sessionId/victory/$winner'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/new'
    | '/overlays'
    | '/session/$sessionId'
    | '/overlays/$sessionId/brb'
    | '/overlays/$sessionId/maps'
    | '/overlays/$sessionId/match'
    | '/overlays/$sessionId/startingSoon'
    | '/overlays/$sessionId/thanks'
    | '/overlays/$sessionId/waitingForNext'
    | '/overlays/$sessionId/victory/$winner'
  id:
    | '__root__'
    | '/'
    | '/new'
    | '/overlays'
    | '/overlays/_overlayLayout'
    | '/session/$sessionId'
    | '/overlays/$sessionId/brb'
    | '/overlays/$sessionId/maps'
    | '/overlays/$sessionId/match'
    | '/overlays/$sessionId/startingSoon'
    | '/overlays/$sessionId/thanks'
    | '/overlays/$sessionId/waitingForNext'
    | '/overlays/$sessionId/victory/$winner'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NewRoute: typeof NewRoute
  OverlaysRoute: typeof OverlaysRouteWithChildren
  SessionSessionIdRoute: typeof SessionSessionIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NewRoute: NewRoute,
  OverlaysRoute: OverlaysRouteWithChildren,
  SessionSessionIdRoute: SessionSessionIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/new",
        "/overlays",
        "/session/$sessionId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/new": {
      "filePath": "new.tsx"
    },
    "/overlays": {
      "filePath": "overlays",
      "children": [
        "/overlays/_overlayLayout",
        "/overlays/$sessionId/brb",
        "/overlays/$sessionId/maps",
        "/overlays/$sessionId/match",
        "/overlays/$sessionId/startingSoon",
        "/overlays/$sessionId/thanks",
        "/overlays/$sessionId/waitingForNext",
        "/overlays/$sessionId/victory/$winner"
      ]
    },
    "/overlays/_overlayLayout": {
      "filePath": "overlays/_overlayLayout.tsx",
      "parent": "/overlays"
    },
    "/session/$sessionId": {
      "filePath": "session.$sessionId.tsx"
    },
    "/overlays/$sessionId/brb": {
      "filePath": "overlays/$sessionId/brb.tsx",
      "parent": "/overlays"
    },
    "/overlays/$sessionId/maps": {
      "filePath": "overlays/$sessionId/maps.tsx",
      "parent": "/overlays"
    },
    "/overlays/$sessionId/match": {
      "filePath": "overlays/$sessionId/match.tsx",
      "parent": "/overlays"
    },
    "/overlays/$sessionId/startingSoon": {
      "filePath": "overlays/$sessionId/startingSoon.tsx",
      "parent": "/overlays"
    },
    "/overlays/$sessionId/thanks": {
      "filePath": "overlays/$sessionId/thanks.tsx",
      "parent": "/overlays"
    },
    "/overlays/$sessionId/waitingForNext": {
      "filePath": "overlays/$sessionId/waitingForNext.tsx",
      "parent": "/overlays"
    },
    "/overlays/$sessionId/victory/$winner": {
      "filePath": "overlays/$sessionId/victory.$winner.tsx",
      "parent": "/overlays"
    }
  }
}
ROUTE_MANIFEST_END */
